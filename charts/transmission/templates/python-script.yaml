apiVersion: v1
kind: ConfigMap
metadata:
  name: update-settings-script
data:
  update_settings.py: |
    import json
    import os

    # Files
    read_only_file = "config/read_only_settings.json"
    settings_file = "config/settings.json"

    # Load JSON files
    with open(read_only_file, "r") as ro_file:
      read_only_settings = json.load(ro_file)

    # Check if settings.json exists
    if not os.path.exists(settings_file):
      settings = {
        "alt-speed-down": 50,
        "alt-speed-enabled": False,
        "alt-speed-time-begin": 540,
        "alt-speed-time-day": 127,
        "alt-speed-time-enabled": False,
        "alt-speed-time-end": 1020,
        "alt-speed-up": 50,
        "bind-address-ipv4": "0.0.0.0",
        "bind-address-ipv6": "::",
        "blocklist-enabled": False,
        "blocklist-url": "http://www.example.com/blocklist",
        "cache-size-mb": 4,
        "dht-enabled": True,
        "download-dir": "/downloads/complete",
        "download-queue-enabled": True,
        "download-queue-size": 5,
        "encryption": 1,
        "idle-seeding-limit": 30,
        "idle-seeding-limit-enabled": False,
        "incomplete-dir": "/downloads/incomplete",
        "incomplete-dir-enabled": True,
        "lpd-enabled": False,
        "message-level": 2,
        "peer-congestion-algorithm": "",
        "peer-id-ttl-hours": 6,
        "peer-limit-global": 200,
        "peer-limit-per-torrent": 50,
        "peer-port": 51413,
        "peer-port-random-high": 65535,
        "peer-port-random-low": 49152,
        "peer-port-random-on-start": False,
        "peer-socket-tos": "default",
        "pex-enabled": True,
        "port-forwarding-enabled": True,
        "preallocation": 1,
        "prefetch-enabled": 1,
        "queue-stalled-enabled": True,
        "queue-stalled-minutes": 30,
        "ratio-limit": 2,
        "ratio-limit-enabled": False,
        "rename-partial-files": True,
        "rpc-authentication-required": False,
        "rpc-bind-address": "0.0.0.0",
        "rpc-enabled": True,
        "rpc-password": "{1ddd3f1f6a71d655cde7767242a23a575b44c909n5YuRT.f",
        "rpc-port": 9091,
        "rpc-url": "/transmission/",
        "rpc-username": "",
        "rpc-host-whitelist": "127.0.0.1",
        "rpc-host-whitelist-enabled": False,
        "rpc-whitelist": "127.0.0.1",
        "rpc-whitelist-enabled": False,
        "scrape-paused-torrents-enabled": True,
        "script-torrent-done-enabled": False,
        "script-torrent-done-filename": "",
        "seed-queue-enabled": False,
        "seed-queue-size": 10,
        "speed-limit-down": 100,
        "speed-limit-down-enabled": False,
        "speed-limit-up": 100,
        "speed-limit-up-enabled": False,
        "start-added-torrents": True,
        "trash-original-torrent-files": False,
        "umask": 2,
        "upload-slots-per-torrent": 14,
        "utp-enabled": False,
        "watch-dir": "/watch",
        "watch-dir-enabled": True,
      }

    else:
      # Load existing settings.json
      with open(settings_file, "r") as s_file:
        settings = json.load(s_file)


    # Recursive function to update nested values
    def update_nested_values(read_only, settings):
      for key, value in read_only.items():
        if isinstance(value, dict) and key in settings:
          update_nested_values(
            value, settings[key]
          )  # Recursive call for nested dictionaries
        else:
          settings[key] = value  # Replace value if key exists


    # Update settings with values from read-only settings
    update_nested_values(read_only_settings, settings)

    # Save the updated settings back to settings.json
    with open(settings_file, "w") as s_file:
      json.dump(settings, s_file, indent=4)

    print(f"Settings updated in {settings_file}.")

