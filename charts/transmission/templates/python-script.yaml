apiVersion: v1
kind: ConfigMap
metadata:
  name: update-settings-script
data:
  update_settings.py: |
    import json
    import os

    # Files
    read_only_file = "/config/read_only_settings.json"
    settings_file = "/config/settings.json"

    # Load JSON files
    with open(read_only_file, "r") as ro_file:
        read_only_settings = json.load(ro_file)

    settings = {
      "alt-speed-down": 50,
      "alt-speed-enabled": False,
      "alt-speed-time-begin": 540,
      "alt-speed-time-day": 127,
      "alt-speed-time-enabled": False,
      "alt-speed-time-end": 1020,
      "alt-speed-up": 50,
      "announce-ip": "",
      "announce-ip-enabled": False,
      "anti-brute-force-enabled": False,
      "anti-brute-force-threshold": 100,
      "bind-address-ipv4": "0.0.0.0",
      "bind-address-ipv6": "::",
      "blocklist-enabled": False,
      "blocklist-url": "http://www.example.com/blocklist",
      "cache-size-mb": 4,
      "default-trackers": "",
      "dht-enabled": True,
      "download-dir": "/downloads/complete",
      "download-queue-enabled": True,
      "download-queue-size": 5,
      "encryption": 1,
      "idle-seeding-limit": 30,
      "idle-seeding-limit-enabled": False,
      "incomplete-dir": "/downloads/incomplete",
      "incomplete-dir-enabled": True,
      "lpd-enabled": False,
      "message-level": 2,
      "peer-congestion-algorithm": "",
      "peer-id-ttl-hours": 6,
      "peer-limit-global": 200,
      "peer-limit-per-torrent": 50,
      "peer-port": 51413,
      "peer-port-random-high": 65535,
      "peer-port-random-low": 49152,
      "peer-port-random-on-start": False,
      "peer-socket-tos": "le",
      "pex-enabled": True,
      "port-forwarding-enabled": True,
      "preallocation": 1,
      "prefetch-enabled": True,
      "queue-stalled-enabled": True,
      "queue-stalled-minutes": 30,
      "ratio-limit": 2,
      "ratio-limit-enabled": False,
      "rename-partial-files": True,
      "rpc-authentication-required": False,
      "rpc-bind-address": "0.0.0.0",
      "rpc-enabled": True,
      "rpc-host-whitelist": "",
      "rpc-host-whitelist-enabled": False,
      "rpc-password": "{f5b48f47687c9bb2bdae52b04005c3a42b72d666Dk49KPKB",
      "rpc-port": 9091,
      "rpc-socket-mode": "0750",
      "rpc-url": "/transmission/",
      "rpc-username": "",
      "rpc-whitelist": "",
      "rpc-whitelist-enabled": False,
      "scrape-paused-torrents-enabled": True,
      "script-torrent-added-enabled": False,
      "script-torrent-added-filename": "",
      "script-torrent-done-enabled": False,
      "script-torrent-done-filename": "",
      "script-torrent-done-seeding-enabled": False,
      "script-torrent-done-seeding-filename": "",
      "seed-queue-enabled": False,
      "seed-queue-size": 10,
      "speed-limit-down": 100,
      "speed-limit-down-enabled": False,
      "speed-limit-up": 100,
      "speed-limit-up-enabled": False,
      "start-added-torrents": True,
      "tcp-enabled": True,
      "torrent-added-verify-mode": "fast",
      "trash-original-torrent-files": False,
      "umask": "002",
      "upload-slots-per-torrent": 14,
      "utp-enabled": False,
      "watch-dir": "/watch",
      "watch-dir-enabled": True
    }



    # Recursive function to update nested values
    def update_nested_values(read_only, settings):
        for key, value in read_only.items():
            if isinstance(value, dict) and key in settings:
                update_nested_values(
                    value, settings[key]
                )  # Recursive call for nested dictionaries
            else:
                settings[key] = value  # Replace value if key exists


    # Update settings with values from read-only settings
    update_nested_values(read_only_settings, settings)

    # Save the updated settings back to the settings.json file
    with open(settings_file, "w+") as s_file:
        json.dump(settings, s_file, indent=4)

    print(f"Settings updated in {settings_file}.")
